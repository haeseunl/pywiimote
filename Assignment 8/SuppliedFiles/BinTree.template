// FILE: BinTree.template
// IMPLEMENTS: The binary_tree node class (see BinTree.h for 
//             documentation). 

#include <cassert>   // provides assert
#include <cstdlib>   // provides size_t
#include <iomanip>   // provides std::setw
#include <iostream>  // provides std::cout

namespace cs3358Spring2007Assign08
{
   template <class Item>
   binary_tree_node<Item>::binary_tree_node(
                              const Item& init_data,
                              binary_tree_node* init_left,
                              binary_tree_node* init_right
                           ) : data_field(init_data), 
                               left_field(init_left),
                               right_field(init_right)
   { }

   template <class Item>
   Item& binary_tree_node<Item>::data()
   { return data_field; }

   template <class Item>
   binary_tree_node<Item>*& binary_tree_node<Item>::left()
   { return left_field; }

   template <class Item>
   binary_tree_node<Item>*& binary_tree_node<Item>::right()
   { return right_field; }

   template <class Item>
   void binary_tree_node<Item>::set_data(const Item& new_data)
   { data_field = new_data; }

   template <class Item>
   void binary_tree_node<Item>::set_left(binary_tree_node* new_left)
   { left_field = new_left; }

   template <class Item>
   void binary_tree_node<Item>::set_right(binary_tree_node* new_right)
   { right_field = new_right; }

   template <class Item>
   const Item& binary_tree_node<Item>::data() const
   { return data_field; }

   template <class Item>
   const binary_tree_node<Item>* binary_tree_node<Item>::left() const
   { return left_field; }

   template <class Item>
   const binary_tree_node<Item>* binary_tree_node<Item>::right() const 
   { return right_field; }

   template <class Item>
   bool binary_tree_node<Item>::is_leaf() const 
   { return left_field == 0 && right_field == 0; }

   template <class Process, class BTNode>
   void inorder(Process f, BTNode* node_ptr)
   {
      if (node_ptr != 0)
      {
         inorder( f, node_ptr->left() );
         f( node_ptr->data() );
         inorder( f, node_ptr->right() );
      }
   }

   template <class Process, class BTNode>
   void postorder(Process f, BTNode* node_ptr)
   {
      if (node_ptr != 0)
      {
         postorder( f, node_ptr->left() );
         postorder( f, node_ptr->right() );
         f( node_ptr->data() );
      }
   }

   template <class Process, class BTNode>
   void preorder(Process f, BTNode* node_ptr)
   {
      if (node_ptr != 0)
      {
         f( node_ptr->data() );
         preorder( f, node_ptr->left() );
         preorder( f, node_ptr->right() );
      }
   }

   template <class Item, class SizeType>
   void print(const binary_tree_node<Item>* node_ptr, SizeType depth)
   {
      if (node_ptr != 0)
      {
         print( node_ptr->right(), depth + 1 );
         std::cout << std::setw(4 * depth) << ""; // 4*depth spaces
         std::cout << node_ptr->data() << std::endl;
         print( node_ptr->left(),  depth + 1 );
      }
   }   
   
   template <class Item>
   void tree_clear(binary_tree_node<Item>*& root_ptr)
   {
      if (root_ptr != 0)
      {
         tree_clear( root_ptr->left() );
         tree_clear( root_ptr->right() );
         delete root_ptr;
         root_ptr = 0;
      }
   }

   template <class Item>
   binary_tree_node<Item>* tree_copy(
      const binary_tree_node<Item>* root_ptr
   )
   {
      binary_tree_node<Item> *l_ptr;
      binary_tree_node<Item> *r_ptr;

      if (root_ptr == 0)
         return 0;
      else
      {
         l_ptr = tree_copy( root_ptr->left() );
         r_ptr = tree_copy( root_ptr->right() );
         return new binary_tree_node<Item>( root_ptr->data(),
                                            l_ptr, r_ptr );
      }
   }

   template <class Item>
   size_t tree_size(const binary_tree_node<Item>* node_ptr)
   {
      if (node_ptr == 0)
         return 0;
      else 
         return 1 + tree_size( node_ptr->left() ) + 
                tree_size( node_ptr->right() );
   }   
}
